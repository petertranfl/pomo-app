[{"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\index.js":"1","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\App.js":"2","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\serviceWorker.js":"3","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\containers\\PomoApp\\PomoApp.js":"4","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\Timer\\Timer.js":"5","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerButton\\TimerReset.js":"6","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerButton\\TimerStartPause.js":"7","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerSelector\\TimerSelector.js":"8","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerEditor\\TimerEditor.js":"9","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\Tasks\\TaskManager.js":"10"},{"size":1031,"mtime":1612932067300,"results":"11","hashOfConfig":"12"},{"size":246,"mtime":1611704542050,"results":"13","hashOfConfig":"12"},{"size":5086,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":8531,"mtime":1613001332892,"results":"15","hashOfConfig":"12"},{"size":644,"mtime":1612977502340,"results":"16","hashOfConfig":"12"},{"size":169,"mtime":1609890892324,"results":"17","hashOfConfig":"12"},{"size":384,"mtime":1611872913853,"results":"18","hashOfConfig":"12"},{"size":572,"mtime":1612991755313,"results":"19","hashOfConfig":"12"},{"size":1795,"mtime":1611703882072,"results":"20","hashOfConfig":"12"},{"size":261,"mtime":1612981161891,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"19hrn2l",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\index.js",[],["46","47"],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\App.js",[],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\serviceWorker.js",[],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\containers\\PomoApp\\PomoApp.js",["48"],"import React, {Component} from 'react';\r\nimport './PomoApp.css'\r\nimport cloud1 from '../../img/clouds/cloud1.png'\r\nimport cloud2 from '../../img/clouds/cloud2.png'\r\nimport cloud3 from '../../img/clouds/cloud3.png'\r\nimport {motion} from 'framer-motion'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCog} from '@fortawesome/free-solid-svg-icons';\r\nimport { faChartBar } from '@fortawesome/free-regular-svg-icons';\r\nimport ReactModal from 'react-modal'\r\nimport Timer from '../../components/Timer/Timer';\r\nimport TimerStartPause from '../../components/TimerButton/TimerStartPause';\r\nimport TimerSelector from '../../components/TimerSelector/TimerSelector';\r\nimport TimerEditor from '../../components/TimerEditor/TimerEditor';\r\nimport TaskManager from '../../components/Tasks/TaskManager';\r\n\r\nclass PomoApp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timerId: 0,\r\n            showModal: false,\r\n            currentTimerType: 0,\r\n            pomodoroCounter: 0,\r\n            isRunning: false,\r\n            isFinished: false,\r\n            currentDuration: 1500,\r\n            username: \"\",\r\n            userPref: {\r\n                pomodoroInitial: 1500,\r\n                shortInitial: 300,\r\n                longInitial: 600,\r\n            },\r\n            tasks: []\r\n        }\r\n        this.editorRef = React.createRef()\r\n    }\r\n    componentDidMount() {\r\n        ReactModal.setAppElement('body');\r\n        //TODO: check for cookies and update user preferences\r\n    }\r\n    modalToggler = () => {\r\n        this.setState(prevState => ({\r\n            showModal: !prevState.showModal\r\n        }))\r\n    }\r\n\r\n    closeOverlay = () => {\r\n        this.editorRef.current.submitEdit(); \r\n    }\r\n\r\n    tick = () => {\r\n            //if prev duration was 0s, timer is finished\r\n            if (this.state.currentDuration === 0) {\r\n                clearInterval(this.state.timerId)\r\n                //check to see which timer it's on\r\n                if (this.state.currentTimerType === 0) {\r\n                    //if pomodoroCounter is 4, reset counter and go to long break\r\n                    if (this.state.pomodoroCounter === 4) {\r\n                        this.setState({\r\n                            pomodoroCounter: 0,\r\n                            isFinished: true\r\n                        })\r\n                        this.changeTimer(2);\r\n                    } else {\r\n                         //add +1 to pomodoroCounter and go to short break\r\n                        this.setState(prevState => ({\r\n                            ...prevState,\r\n                            pomodoroCounter: prevState.pomodoroCounter++\r\n                        }))\r\n                        this.changeTimer(1);\r\n                    }\r\n                } else {\r\n                    //if not on pomodorotimer, then switch to pomodorotimer\r\n                    this.changeTimer(0);\r\n                }\r\n            } else {\r\n            //otherwise, tick down a duration\r\n            this.setState({\r\n                    currentDuration: this.state.currentDuration - 1,\r\n            })\r\n            console.log('pomotick')\r\n        }\r\n    }\r\n\r\n    startTimer = (start) => {\r\n        if (start) {\r\n                console.log(this.state)\r\n                this.setState({\r\n                    isRunning: true,\r\n                    timerId: setInterval(this.tick, 1000)\r\n                })\r\n                console.log('started timer')\r\n        } else {\r\n            //pause state of timer\r\n                this.setState({\r\n                    isRunning: false,\r\n                })\r\n                console.log('timer paused')\r\n                clearInterval(this.state.timerId);\r\n            }\r\n    }\r\n\r\n    resetTimer = () => {\r\n        console.log('resetTimer activated')\r\n        console.log(this.state.currentTimerType)\r\n        clearInterval(this.state.timerId);\r\n        this.setState({\r\n            isRunning: false\r\n        })\r\n        switch (this.state.currentTimerType) {\r\n            case 0: \r\n                this.setState({\r\n                   currentDuration: this.state.userPref.pomodoroInitial\r\n                })\r\n                break;\r\n            case 1: \r\n                this.setState({\r\n                    currentDuration: this.state.userPref.shortInitial\r\n                })\r\n                break;\r\n            case 2:\r\n                this.setState({\r\n                    currentDuration: this.state.userPref.longInitial\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    editTimer = (newTimers) => {\r\n        console.log(newTimers)\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            userPref: {\r\n                ...prevState.userPref,\r\n                pomodoroInitial: newTimers.editPomodoro * 60,\r\n                shortInitial: newTimers.editShort * 60,\r\n                longInitial: newTimers.editLong * 60\r\n            }\r\n        }), this.resetTimer)\r\n    }\r\n\r\n\r\n    changeTimer = (timerType) => {\r\n        console.log('changetimer activated')\r\n        if (timerType !== this.state.currentTimerType) {\r\n           this.setState({\r\n               currentTimerType: timerType\r\n           }, this.resetTimer);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wholePage\">\r\n                <ReactModal\r\n                    isOpen={this.state.showModal}\r\n                    className=\"Modal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    shouldCloseOnOverlayClick={true}\r\n                    shouldFocusAfterRender={true}\r\n                    shouldCloseOnEsc={true}\r\n                    onRequestClose={this.closeOverlay}>\r\n                    {<TimerEditor\r\n                        initialState={this.state.userPref}\r\n                        ref={this.editorRef}\r\n                        submitEdit={this.editTimer}\r\n                        toggleModal={this.modalToggler}/>}\r\n                </ReactModal>\r\n                <header>\r\n                    <h1>Pomofi</h1>\r\n                </header>\r\n                <div className=\"window\">\r\n                    <div className=\"cloud1\">\r\n                        <motion.img src={cloud1}\r\n                                    animate={{x: 2000}}\r\n                                    transition={{duration: 8, type:\"tween\"}}\r\n                                    />\r\n                    </div>\r\n                    <div className=\"cloud2\">\r\n                        <motion.img src={cloud2}/>\r\n                    </div>\r\n                    <div className=\"cloud3\">\r\n                        <motion.img src={cloud3}/>\r\n                    </div>\r\n                    <div className=\"timerContainer\">\r\n                        <div className=\"timerSubContainer\">\r\n                            <div className=\"timerDisplay\">\r\n                            <TimerSelector\r\n                                pomodoro={() => this.changeTimer(0)}\r\n                                shortBreak={() => this.changeTimer(1)}\r\n                                longBreak={() => this.changeTimer(2)}/>\r\n                                <Timer duration={this.state.currentDuration}/>\r\n                            </div>\r\n                            <div className=\"timerButtons\">\r\n                                <TimerStartPause\r\n                                isRunning={this.state.isRunning}\r\n                                start={() => this.startTimer(true)}\r\n                                pause={() => this.startTimer(false)}/>\r\n                                <motion.button className=\"editButton\" \r\n                                                    onClick={() => this.modalToggler()}\r\n                                                    whileHover={{color: \"#ffffff\"}}>\r\n                                        <FontAwesomeIcon icon={faCog} size=\"2x\"/>\r\n                                </motion.button>\r\n                                <motion.button className=\"chartButton\" \r\n                                                    onClick={() => this.modalToggler()}\r\n                                                    whileHover={{color: \"#ffffff\"}}>\r\n                                        <FontAwesomeIcon icon={faChartBar} size=\"2x\"/>\r\n                                </motion.button>\r\n                            </div>\r\n                        </div>\r\n                        <TaskManager/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PomoApp;","C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\Timer\\Timer.js",[],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerButton\\TimerReset.js",[],["49","50"],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerButton\\TimerStartPause.js",[],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerSelector\\TimerSelector.js",[],["51","52"],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\TimerEditor\\TimerEditor.js",[],"C:\\Users\\peter\\pomo-app\\pomo-app\\src\\components\\Tasks\\TaskManager.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":111,"column":9,"nodeType":"59","messageId":"60","endLine":127,"endColumn":10},{"ruleId":"53","replacedBy":"61"},{"ruleId":"55","replacedBy":"62"},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["65"],["66"],["65"],["66"],"no-global-assign","no-unsafe-negation"]